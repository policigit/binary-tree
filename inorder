#include <stdio.h>
#include <stdlib.h>

// Structure for a binary tree node
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new binary tree node
struct TreeNode* createNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to perform inorder traversal of a binary tree
void inorderTraversal(struct TreeNode* root) {
    if (root == NULL) {
        return;
    }

    // Traverse the left subtree
    inorderTraversal(root->left);

    // Print the data of the current node
    printf("%d ", root->data);

    // Traverse the right subtree
    inorderTraversal(root->right);
}

int main() {
    // Create the binary tree with the given input
    struct TreeNode* root = createNode(7);
    root->left = createNode(5);
    root->right = createNode(8);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->left->left->left = createNode(0);
    root->left->right->left = createNode(6);
    root->right->right = createNode(9);
    root->left->right->right = createNode(4);
    root->left->left->right = createNode(2);

    printf("Inorder Traversal: ");
    inorderTraversal(root);
    printf("\n");

    // Free the memory allocated for the binary tree (not shown in detail here)
    
    return 0;
}
